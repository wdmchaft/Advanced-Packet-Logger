function [err, errMsg, linesRead, linesWritten] = debug2release(debugSourceFileName, releaseSourceFileName, noPrint)
%function [err, errMsg] = debug2release(debugSourceFileName, releaseSourceFileName)
% Copies "debugSourceFileName" to "releaseSourceFileName" excluding all lines 
%   between "%#IFDEF debugOnly" and "%#ENDIF".  This means the debugging 
%   source files need to be properly managed with the IFDEF/ENDIF lines.  Any 
%   labels or text with the same name as the source file is replaced with the 
%   name of the target/non-debug file.
%Inserts a warning comment at the beginning of the file after the first blank line
%VSS revision   $Revision: 5 $
%Last checkin   $Date: 5/12/06 6:34p $
%Last modify    $Modtime: 5/12/06 3:18p $
%Last changed by$Author: Arose $
%  $NoKeywords: $

[err, errMsg, modName] = initErrModName(mfilename);
if nargin < 3
  noPrint = 0;
end
fidIn = fopen(debugSourceFileName, 'r');
if fidIn < 1
  err = 1;
  errMsg = sprintf('%s: unable to open for reading "%s"', modName, debugSourceFileName);
  if nargout < 1
    fprintf('\n Error: %s', errMsg);
  end
  return
end
fidOut = fopen(releaseSourceFileName, 'w');
if fidOut < 1
  fclose(fidIn);
  err = 1;
  errMsg = sprintf('%s: unable to open for writing "%s"', modName, releaseSourceFileName);
  if nargout < 1
    fprintf('\n Error: %s', errMsg);
  end
  return
end
[pathstrSource,debugSourceName,extSource,versn] = fileparts(debugSourceFileName);
debugSourceNameLength = length(debugSourceName);
[pathstrRelease,releaseSourceName,extRelease,versn] = fileparts(releaseSourceFileName);
% if the name hasn't changed, 
if strcmp(debugSourceName, releaseSourceName)
  renameInternalRef = 0;
else
  renameInternalRef = 1;
end

skipLines = 0; %flag set when IFDEF etc found
linesRead = 0;
linesWritten = 0;
warningNotWritten = 1 ;
keyPhrase = '%#IFDEF debugOnly';
lengthKeyPhrase = length(keyPhrase);
keyPhrasePrefix = [' ','%']; %if anything other than these are found in front of the keyPhrase, no action is taken!
while 1
  thisTextLine = fgetl(fidIn);
  linesRead = linesRead + 1;
  if linesRead > 55
    linesRead=linesRead;
  end
  %   if ~skipLines
  %     a = findstrchr('%#IFDEF debugOnly',  thisTextLine);
  %     if a
  %       skipLines = 1;
  %     end
  %   end %if skipLines
  
  %might be nested.  Only the outer pair should define the skip range
  % so we'll use skipLines as a counter and not just a simple flag
  if isValidIForEND(thisTextLine, keyPhrase, keyPhrasePrefix)
    skipLines = skipLines + 1;
  end %if skipLines
  if ~skipLines
    %replace any file related names
    if renameInternalRef;
      a = findstrchr(debugSourceName, thisTextLine);
      if a & length(thisTextLine) >= debugSourceNameLength 
        thisTextLine = sprintf('%s%s%s', thisTextLine(1:a-1), releaseSourceName, thisTextLine(a+debugSourceNameLength:length(thisTextLine)) );
      end
    end %if renameInternalRef
    fprintf(fidOut,'%s\r\n', thisTextLine);
    linesWritten = linesWritten + 1;
    if warningNotWritten
      %if line is blank
      if length(thisTextLine) < 1 | length(find(isspace(thisTextLine))) == length(thisTextLine)
        fprintf(fidOut,'%%********************* WARNING ****************************\r\n');
        fprintf(fidOut,'%%********************* WARNING ****************************\r\n');
        fprintf(fidOut,'%% DO NOT EDIT THIS FILE. IT IS CREATED AUTOMATICALLY FROM\r\n');
        fprintf(fidOut,'%%     "%s".  \r\n', debugSourceFileName);
        fprintf(fidOut,'%%  Any edits here will be over written during the compile.\r\n');
        fprintf(fidOut,'%%  Instead, you should edit that file. \r\n');
        fprintf(fidOut,'%%********************* WARNING ****************************\r\n');
        fprintf(fidOut,'%%********************* WARNING ****************************\r\n');
        fprintf(fidOut,'\r\n');
        warningNotWritten = 0 ;
      end
    end %if warningNotWritten
  end
  if skipLines
    if isValidIForEND(thisTextLine, '%#ENDIF', keyPhrasePrefix)% findstrchr('%#ENDIF',  thisTextLine);
      skipLines = skipLines - 1;
    end
  end
  if feof(fidIn)
    break
  end
end %while 1
fcloseIfOpen(fidIn);
fcloseIfOpen(fidOut);
if noPrint
  return
end
fprintf('\n lines read = %i', linesRead);
fprintf('\n lines written = %i', linesWritten);


%%%%%%%%%%%%%%%%
function [isValid] = isValidIForEND(thisTextLine, keyPhrase, keyPhrasePrefix);
isValid = 0;
if findstrchr(keyPhrase, thisTextLine) & length(thisTextLine) >= length(keyPhrase)
  a = ismember(thisTextLine, keyPhrasePrefix);
  b = findstrchr(keyPhrase, thisTextLine);
  c = find(a <1);
  isValid = any(a);
  if c(1) > 1
    % the position of the last OK char
    if b > c(1)-1
      isValid = 0;
    end
  end
end% if findstrchr(keyPhrase, thisTextLine) & length(thisTextLine) >= length(keyPhrase) else
%*************** function [isValid] = isValidIForEND(thisTextLine, keyPhrase, keyPhrasePrefix);
%***************************