function [err, errMsg] = makeAbout_diag(debugCode, keysToFind, outputFileName, Version);
%makeAbout_diag
%This process will generate the file 'about_<outputFileName>_private.m' such
% that the time and date at the time of creation is
% part of the file.  The file is in the current directory.
%INPUTS:
% Version: if zero, or missing, no mention is made when called
%[disabled]It reads the contents of "LLDHistory.txt" and includes
%[disabled]the contents as comments in 'aboutLLD_private.M'
%This routine confirms that the 'about_<outputFileName>_private.m' file has been
%successfully created by accessing it and comparing the
%returned values with the generated values.
%This M file should be called just prior
% to the creation of the DLL or the '<outputFileName>.exe'
%When 'about_<outputFileName>' is run, it will return a version 
% number and the time and date as part of a string
%VSS revision   $Revision: 1 $
%Last checkin   $Date: 2/15/07 3:47p $
%Last modify    $Modtime: 2/15/07 2:57p $
%Last changed by$Author: Arose $
%  $NoKeywords: $

err= 0;
errMsg = '';

if nargin < 4
  Version = 0;
end

%make sure the timer is running & start it if not.
try
  a = toc;
catch
  tic;
end

fileName = sprintf('about_%s_private', outputFileName);
%MATLAB has a 31 character function name limit
if length(fileName) > 31
  fileName = fileName(1:31);
end
fid = fopen(strcat(fileName,'.m'), 'w');
if (fid <0)
  errMsg = sprintf('Unable to create file "%s.m": file might be open/in use', fileName);
  err = 1;
  fprintf('%s\n', errMsg);
  return;
end

extraText = '';
if debugCode
  extraText = ' (Debug)';
end % if debugCode  

%find the term within all "#IFDEF " within "keysToFind" & strip the '#IFDEF '
% ignore/skip the main '#IFDEF debugOnly' which is always used
for itemp =1:length(keysToFind)
  a = char(keysToFind(itemp));
  if ~findstrchr(a, '#IFDEF debugOnly')
    b = '#IFDEF ';
    if findstrchr(b, a);
      extraText = sprintf('%s %s', extraText, a(length(b)+1:length(a)));
    else
      err = 1;
      errMsg = sprintf('>%s: the passed in keyPhrase "%s" is not in the proper format', mfilename, a);
      return
    end
  end
end %for itemp =1:length(keysToFind)

%function calling structure:
fprintf(fid, 'function [codeVersion, reply] = %s()\r\n', fileName);
%function comments:
fprintf(fid, '%%function [codeVersion, reply] = %s()\r\n', fileName);
fprintf(fid, '%% codeVersion: version number in floating point xx.yyy where X is major & yyy is minor\r\n');
fprintf(fid, '%%reply: string including some text, the date & time of creation & the above version number\r\n');
fprintf(fid, '%% Note: this function is generated by "%s" & therefore\r\n', mfilename);
fprintf(fid, '%%this file should not be editted.\r\n');
fprintf(fid, '\r\n');

%"codeVersion" is used later as well
a = sprintf('codeVersion = %f', Version);
fprintf(fid, '%s;\r\n', a);
%not including the LLDHistory
% % fidIn = fopen('lldHistory.txt', 'r');
% % if fidIn < 0
% %   err = 1 ;
% %   errMsg = '>makeAlld: unable to access for reading "LLDHistory.txt".  It needs to be in the current directory.';
% %   return
% % else
% %   while ~feof(fidIn)
% %     textIn = fgetl(fidIn);
% %     fprintf(fid, '%%%s\r\n', textIn);
% %   end
% %   fcloseIfOpen(fidIn);
% % end

fprintf(fid, 'if codeVersion\r\n');
%+++++++++=========+++++++++++++++=+++++++
%the following 3 lines will produce one line in the output: be careful if you modify
%  the word 'created ' (including the space) is used in some routines to locate the date-time stamp: DON'T MODIFY
%+++++++++=========+++++++++++++++=+++++++
fprintf(fid, '  reply = sprintf(''%s Version %%.3f%s created ', outputFileName, extraText);
nowIs = datestr(now,0); %do NOT modify this format: other routines key off THIS format!
fprintf(fid, '%s', nowIs);
fprintf(fid, '.'', codeVersion);\r\n');
%+++++++++=========+++++++++++++++=+++++++
% end of 3 line group
%+++++++++=========+++++++++++++++=+++++++
fprintf(fid, 'else %% if codeVersion\r\n');
%+++++++++=========+++++++++++++++=+++++++
%the following 3 lines will produce one line in the output: be careful if you modify
%  the word 'created ' (including the space) is used in some routines to locate the date-time stamp: DON'T MODIFY
%+++++++++=========+++++++++++++++=+++++++
fprintf(fid, '  reply = sprintf(''%s created %s', outputFileName, extraText);
nowIs = datestr(now,0); %do NOT modify this format: other routines key off THIS format!
fprintf(fid, '%s', nowIs);
fprintf(fid, '.'');\r\n');
%+++++++++=========+++++++++++++++=+++++++
% end of 3 line group
%+++++++++=========+++++++++++++++=+++++++
fprintf(fid, 'end %% if codeVersion\r\n');


fclose(fid);
%tickle MatLab or the OS into actually writing the file.
% Otherwise the call in the script that called this function following this call won't work!!  (go figure)
dos (''); 

fprintf('\n "%s" created/updated.  The trial run produces:', fileName);

[codeVersion, reply] = eval(fileName);
    
fprintf('\n Numeric Version: [%.3f]\n Text: [%s]',  codeVersion, reply);
% confirm the version # and the compile date/time
if ( (Version ~= codeVersion) | ~(findstr(nowIs, reply)))
  err = 1;
  errMsg = sprintf('Problems creating "%s": Failed to confirm version &/or time-date.', fileName);
  try
    delete(fileName);
  catch
  end
else
  fprintf('\n "%s" creation and contents confirmed.', fileName);
end
if nargout < 1
  clear err
end